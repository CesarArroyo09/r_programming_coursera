## Loop functions
## lapply
lapply
## lapply executes a function over a list
## and always returns a list
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
## It returns a list with the values of the means for each element of the list
## Let's complicate the list
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
?runif
## runif generates random number from the uniform distribution
x <- 1:4
lapply(x, runif)
## runif takes as its first variable the number of random numbers you want to generate
## So the first element of the list is a vector on length 1, the second of length 2, etc
## Now I want to run runif with different arguments
lapply(x, runif, min = 0, min = 10)
lapply(x, runif, min = 0, max = 10)
## lapply and related use anonymous functions
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
## I want to extract the first column of each of these matrices
## Anonymous function in lapply. Created "on the fly"
lapply(x, function(elt) elt[, 1])
## sapply simplifies the output of lapply. So it looks to return vectors or matrices
## If it can't figure it out, it will return a list
x1 <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
## Let's see the differences between the outputs of lapply and sapply on x1
lapply(x1, mean)
sapply(x1, mean)
is.vector(sapply(x1, mean))
## sapply(x1, mean) returns a vector
names(sapply(x1, mean))
## And it's a vector with names
## ------------------------
## apply
## apply is used to evaluate a function (often anonymous) over the margins of an array
## Often used to be applied over columns and rows of an array
str(apply)
## Arguments of apply
## X is an array
## MARGIN is an integer vector indicating which margins should be "retained"
## FUN is the function to be applied
## ... other arguments of FUN
?rnomr
?rnorm
## Create matrix with numbers from the normal distribution
x <- matrix(rnorm(200), 20, 10)
## Find the mean of each column of the matrix
apply(x, 2, mean)
## Find the mean of each row of the matrix
apply(x, 1, mean)
?rowsum
## There are shortcut functions for sums and means
rowSums(x)
rowMeans(x)
colSums
colSums(x)
colMeans(x)
## This are way faster to type
## They are also optimized
##
## Now I want to obtain the quantiles of the rows of a matrix
## Let's say the 25% and 75%
apply(x, 1, quantile, probs = c(0.25, 0.75))
## What type of object it returns?
obj <- apply(x, 1, quantile, probs = c(0.25, 0.75))
is.matrix(obj)
is.data.frame(obj)
## It is a matrix with names
## names(obj)
rownames(obj)
## Actually with row names only
## Average matrix of a three dimensional array
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a[1, 1, 1]
a[1, 1, ]
a[ , , 2]
## Apply the mean over the third dimension
apply(a, c(1, 2), mean)
## This can also be calculated with rowMeans
rowMeans(a, dim = 2)
##
## -------------------------
##
## mapply
str(mapply)
?lapply
?sapply
## I want the object obtained by
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
## We can use mapply
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
## noise generates random nois
noise(1:5, 5:1, 2)
## What I want is
mapply(noise, 1:5, 5:1, 2)
mapply(noise, 1:5, 1:5, 2)
## The last output is the same as
list(noise(1, 1, 2), noise(2, 2, 2), noise(3, 3, 2), noise(4, 4, 2), noise(5, 5, 2))
##
## -----------------------------
##
## tapply
str(tapply)
## tapply is used to apply a function over subsets of a vector
## Vector of random variables
x <- c(rnorm(10), runif(10), rnorm(10, 1))
?gl
## We have a vector which groups three "types" of numbers
## Create a factor for separating the objects
f <- gl(3, 10)
f
## This is a factor with three levels
## Now I can calculate means within the groups with tapply
tapply(x, f, mean)
## Without simplification
tapply(x, f, mean, simplify = FALSE)
## We get a list instead of a vector
## We can calculate ranges for example
tapply(x, f, range)
##
## -------------------------------
##
## split
## split takes a vector or other objects and splits it into groups determined by a factor or a list of factors
str(split)
## It's actually not a loop function
## An example with the object created with rnorm, runif, rnorm
f <- gl(3, 10)
split(x, f)
## Example is split followed by lapply
lapply(split(x, f), mean)
## We can split a dataframe
search()
head(airquality)
## Want to calculate mean of Ozone within each month
## We split first
s <- split(airquality, airquality$Month)
## Now I can calculate means by month
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
## Now we can try with sapply
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
## It creates a matrix
## Now without NA values
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
## Splitting on more than one level
## Create random variables and factors
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
## f1 and f2 represents two groupings of x
## We can combine them
interaction(f1, f2)
## We don't need to use interaction. split handles the two factors
str(split(x, list(f1, f2)))
## Some of the levels are unoccupied and we can drop them
str(split(x, list(f1, f2)), drop = TRUE)
str(split(x, list(f1, f2), , drop = TRUE))
##
## --------------------------
##
## Debuggin Tools - Diagnosing the Problem
?message
## We can get in R, message, warning, error and condition
## All of which are generated by the functions named that way
log(-1)
?log
log()
log
## log(-1) generates a warning. Non fatal error
?invisible
invisible(0)
## Let's use some function
printMessage <- function(x) {
if(x > 0) {
print("x is greater than zero")
} else {
print("x is less than or equal to zero")
}
invisible(x)
}
printMessage(25)
printMessage(-5)
x <- printMessage(25)
x
## If NA is used as argument
printMessage(NA)
## Error is produced
## We introduced a fixed function
printMessage2 <- function(x) {
if(is.na(x)) {
print("x is a missing value!")
} else if(x > 0) {
print("x is greater than zero")
} else {
print("x is less than or equal to zero")
}
invisible(x)
}
## Let's try
x <- log(-1)
printMessage2(x)
##
## --------------------
##
## Debugging Tools - Basic Tools
## traceback: prints out the function call stack after an error occurs
## debug: function in debug mode. Executes one line at a time
## browser: suspends function at some point and continue from there in debug mode
## trace: allows to insert debuggin code in a function in specific places
## recover: allows you to modify error behavior so you can browse the function call stack
##
## ---------------------------
##
## Debuggin Tools - Using the Tools
rm(x)
mean(x)
## Error produced
traceback()
## Another error
lm(y ~ x)
## Now call traceback
traceback()
## Error occured 7 levels deep
## Now, let's debug lm
debug(lm)
lm(y ~ x)
## We found out where the error occured in the lm function
## This should give a hint of what to do to solve the error
?options
options()
## Use of recover
## Modify global options
options(error = recover)
read.csv("nosuchfile")
## recover print the function call stack when an error occurs
## From there, you can browse in whatever level of the function call stack you want
savehistory("~/Documentos/r_programming_coursera/week_301_all_week3.Rhistory")
