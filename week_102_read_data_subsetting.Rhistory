## Reading tabular data and subsetting
## First attemp to use read.table
data <- read.table("hw1_data.csv")
data <- read.table("hw1_data.csv", sep = ",")
data
data[1,]
data <- read.table("hw1_data.csv", sep = ",", header = TRUE)
data[1,]
data <- read.csv("hw1_data.csv")
## ----------------------------------------------------------------------------
## Reading Large Tables
## There are some tricks regarding on how to optimize the reading of tabular data
data <- read.table("hw1_data.csv", sep = ",", header = TRUE, colClasses = "numeric")
## A trick for finding out easily what are the data types of your columns is shown next
initial <- read.table("hw1_data.csv", sep = ",", header = TRUE, nrows = 100)
classes <- sapply(initial, class)
classes
data <- read.table("hw1_data.csv", sep = ",", header = TRUE, colClasses = classes)
## What we did in here is that we just took the first 100 rows of "hw1_data.csv". An then, we apply the function class to each column of these 100 first rows. Having done this, we obtain the classes in a vector containing strings. We can use then classes in colClasses
## ---------------------------------------------------------------------
## Textual data formats
y <- data.frame(a = 1, b = "a")
dput(y)
## We can extract the meta data in a given file
dput(y, file = "y.R")
## We can now use the data and meta data by using dget()
new.y <- dget("y.R")
new.y
dput(new.y)
## Dumping R Objects
x <- "foo"
y <- data.frame(a = 1, b = "a")
dump(c("x","y"), file = "data.R")
rm(x,y)
## Now we can bring back the objects dumped by using source
source("data.R")
y
x
##------------------------------------------------------------------------------
str(file)
## Connections: Interfaces to the Outside World
## We open a connection to a csv file and read it
con <- file("hw1_data.csv", "r") ## Read "hw1_data.csv" file
data <- read.csv(con)
close(con)
close(con)
dir()
## Making a connection to a .gz file
con <- gzfile("quiz1_data.zip")
x <- readLines(con, 10)
x
## This time it did not work because the encoding of the file is not gz
## We now make a connection to a web page
close(con)
con <- url("https://github.com/CesarArroyo09/light_geodesics_thesis.git", "r")
con <- url("http://github.com/CesarArroyo09/light_geodesics_thesis.git", "r")
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
close(con)
##-------------------------------------------------------------------------------
## Subsetting R Objects: Basics
x <- c("a", "b", "c", "c", "d", "a")
x[1]
x[2]
x[1:4]
x[x > "a"]
u <- x > "a"
u
## Subsetting - Lists
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x$foo
x[["bar"]]
x["bar"]
## Extract multiple elements of a list
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1,3)]
x[c(2,3)]
## We can see here the difference between double square brackets and $
## The first allows computed indices and the second does not
name <- "foo"
x[[name]]
x$name
x$foo
x <- list(a = list(10,12,14), b = c(3.14,2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
## Subsetting - Matrices
x <- matrix(1:6, 2, 3)
x
x[1,2]
x[2,1]
## Indices can also be missing
x[1,]
x[,2]
## Elements of matrices are by default giving as vectors
x[1, 2]
x[1,2, drop = F]
## Drop = F, indicates that the element is returned as a matrix
x[1,]
x[1, , drop = F]
## Subsetting - Partial Matching
x <- list(aardvark = 1:5)
x$a
x[["a"]]
x[["a", exact = F]]
## In x there is just one element of name aardvark. If you don't one to call this again and again R can complete the number by itself
## This only with $, with [[]] can be used if argument exact = F is passed
## Subsetting - Removing Missing Values
x <- c(1, 2, NA, 4, NA, 5)
## A vector containing T is NA and F if is not NA
is.na(x)
bad <- is.na(x)
View(data)
View(initial)
View(new.y)
View(y)
x[!bad]
## Now, with multiple objects
y <- c("a", "b", NA, "d", NA, "f")
## complete.cases Return a logical vector indicating which cases are complete, i.e., have no missing values.
good <- complete.cases(x,y)
good
x[good]
y[good]
y <- c("a", "b", NA, "d", "e", "f")
good <- complete.cases(x,y)
good
x[good]
y[good]
## Removing NA values
airquality[1:6,]
airquality[1:6,2:3]
good <- complete.cases(airquality)
airquality[good, ][1:6,]
## Vectorized Operations
x <- 1:4, y <- 6:9
x <- 1:4; y <- 6:9
x
y
x + y
x > 2
x >= 2
y == 8
x * y
x / y
x == 1:4
## Vectorized Matrix Operations
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
y
x * y ## element-wise multiplication
x / y ## element-wise division
x %*% y ## true matrix multiplication
y %*% x ## true matrix multiplication
savehistory("~/Documentos/r_programming_coursera/week_102_read_data_subsetting.Rhistory")
