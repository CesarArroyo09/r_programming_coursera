## Control sutructures in R
## Control structures - If-else
if(x>3) {}
x <- c(4,5,3,1,2)
if(x>3) {}
if(x>3) {y <- 10} else {y <- 0}
x <- 2
if(x>3) {y <- 10} else {y <- 0}
y <- if(x>3) {10} else {0}
x <- 4
y <- if(x>3) {10} else {0}
x <- 1
y <- if(x>3) {10} else {0}
## Those were examples of if-else
## Control structures - For loops
for(i in 1:10)
{}
for(i in 1:10)
{print(i)}
## Examples of equivalent for loops
x <- c("a", "b", "c", "d")
for(i in 1:4) {print(x[i])}
for(i in seq_along(x)){print(x[i])}
?seq_along
for(letter in x) {print(letter)}
for(i in 1:4) print(x[i])
for(i in 1:4) {
print(x[i])
}
x <- matrix(1:6, 2, 3)
for(in in seq_len(nrow(x))) {
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
x
## ---------------------------------------------------------------------
## Control structures - While loops
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
## In the while conditions, it can be more than one
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
?rbinom
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
while(z >= 3 && z <= 10) {
+     print(z)
+     coin <- rbinom(1, 1, 0.5)
+     if(coin == 1) { ## random walk
+         z <- z + 1
+     } else {
+         z <- z - 1
+     }
+ }
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else {
z <- z - 1
}
}
## Control structures - Repeat, Next, Break
x0 <- 1
tol <- 1e-8
?repeat
asd
## Next, return
## next is used to skip an interation of a loop
## Example
for(i in 1:100) {
if(i <= 20) {
next()
}
print(i)
}
## Your First R Function
add2 <- function(x, y) {
x + y
}
add2(3, 5)
add2(c(2,5),c(3,4))
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
## Functions (part 1)
formals(add2)
formals(columnmean)
## sd function. Examples of how to handle with functions
mydata <- rnorm(100)
?rnorm
sd(mydata)
sd?
c
?sd
## Differente ways you can fill your arguments in a R function
sd(mydata)
sd(x=mydata)
sd(x=mydata, na.rm = FALSE)
sd(na.rm = FALSE, x = mydata)
sd(na.rm = FALSE, mydata)
sd()
add2(x,)
## To see arguments of a function
args(lm)
lm(data = mydata, y - x, model = FALSE, 1:100)
lm(data = mydata, y = x, model = FALSE, 1:100)
lm(data = mydata, y == x, model = FALSE, 1:100)
?lm
lm(data = mydata, y ~ x, model = FALSE, 1:100)
?gl
mydataa
mydata
## Functions (part 2)
f <- function(a, b) {
a^2
}
f(2)
f(2,3)
f(b=2)
f(a=2)
f(a=2, b = NULL)
f <- function(a, b) {
print(a)
print(b)
}
f(2,3)
f(45)
## Example using the "..." argument
xdata <- rnorm(100)
?seq
ydata <- seq(-1, 1, length.out = 100)
?plot
## I am going to redefine the plot funtion and now some of its arguments by default behave differently
myplot <- function(x, y, type = "l", ...) {
plot(x, y, type = type, ...)
}
## Now plot is kind of redefined by myplot
myplot(y, x)
length(x)
myplot(ydata, xdata)
mean
?mean
?paste
args(paste)
?cat
cat("My", "cat", sep = " ")
args(cat)
## When a function takes a large number of arguments as in a function that concatenates several strings by as arguments the "..." argument is used because the number of strings is not known in advance
## Positional matching or partial matching cannot be used with arguments after "..."
paste("a", "b", sep = ":")
paste("a", "b", se = ":")
paste("a", "b", ":")
## Note how the last two calls of paste produce unexpected outputs
## --------------
## Scoping Rules - Symbol Binding
lm <- function(x) {x * x}
lm(x)
lm
search()
?lm
## Scoping rules determine the assignation between names and the actual content of the object. For examples functions having the same name but being actually in different packages
## A new function containing z as a free variable. How R determines the content of z?
f <- function(x, y) {
x^2 + y / z
}
f(2,3)
2^2 + 3/11
## R looks for a variable called z in the Global Enviroment
## Now the same function but with the undefined variable w to show error
f <- function(x, y) {
x^2 + y / w
}
f(2,3)
f <- function(x, y) {
x^2 + y / z
}
## Good function again
## -------------
## Scoping Rules - R Scoping Rules
## A killer feature of R is the ability of defining a function inside another function. In fact, a function in R can return a function as is shown
## Function returning a function that given an argument raises the argument to the nth power
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
## Now I can use my newly defined function for create powers functions
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
cube(4)
square(3)
square(4)
## We can explore a function closure. Or what is in a function environment
ls(environment(cube))
environment(cube)
get("n", environment(cube))
get("pow", environment(cube))
ls(environment(square))
get("n", environment(square))
## Now we see an example of lexical vs dynamic scoping
## Let's define a variable y
y <- 10
## And a function f using another function g inside
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
## Remember that lexical scoping uses the environment in which the value is defined
## Since g was defined in the global environment, the function g(x) looks for a y value within this environment
## It doesn't use the local value inside the function f
## In that case the result would be f(3) = 10
## Instead in R the return value is f(3) = 30. This is 2^2 + 3*10
## With dynamic scoping, the value of y is looked up in the environment from which the function was called (the calling environment)
g <- function(x) {
a <- 3
x+a+y
}
g(2)
g(-3)
## ------------
## Scoping Rules - Optimization Example
## Example of a constructor function
make.NegLogLik <- function(data, fixed = c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
## This constitutes an example which minimize some values
## Likelihood functions are used to solve the parameters of a distribution function given a body of data. Usually this implies a maximization or minimization of the parameters
## The log of likelihood functions is usually used for the task
## We are now going to maximize a normal likelihood by using our constructor function
?set.seed
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals) ## Random normal distribution was generated. Now we construct function nLL
nLL
ls(environment(nLL))
?optim
## We now optimize
## <environment: 0x7fbbfa8> is the direction of the environment in which nLL was defined
optim(c(mu = 0, sigma = 1), nLL)$par
## We can fix any of the two values
## We have to reconstruct the nLL function in order to redefine that we are setting sigma as fixed
nLL <- make.NegLogLik(normals, c(FALSE, 2))
optimize(nLL, c(-1, 3))$minimum
## We now fix mu
nLL <- make.NegLogLik(normals, c(1, FALSE))
optimize(nLL, c(1e-6, 10))$minimum
## We are now going to plot the negative log likelihood
## With mu = 1
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
?sapply
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
## Now with sigma = 2
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
## -----------------
## Dates and Tims
## Dates and Times
## Dates are stored as the number of days since 1970-01-01
## Times are stored as the number of seconds since 1970-01-01
## They both have their own class
## Storing dates
x <- as.Date("1970-01-01")
x
unclass(x)
?unclass
unclass(as.Date("1970-01-02"))
## unclass shows how the data is represented internally
## I can sum dates
as.Date("1980-02-09") + as.Date("1993-02-09")
## No. I can't
months(as.Date("1980-02-09"))
quarters(as.Date("1980-02-09"))
weekdays(as.Date("1980-02-09"))
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
p$isdst
p$zone
p$gmtoff
p$mday
## Now in POSIXct format
## This is the number of seconds since 1970-01-01
x
unclass(x)
## We can convert strings to time objects
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %H:%N")
x
x <- strptime(datestring, "%B %d, %H:%M")
x
?strptime
datestring
datestring <- c("enero 10, 2012 10:40", "diciembre 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %H:%M")
x
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
x <- strptime(datestring, "%m %d, %Y %H:%M")
x
class(x)
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
datestring
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
datestring <- c("01 10, 2012 10:40", "12 9, 2011 9:10")
x <- strptime(datestring, "%m %d, %Y %H:%M")
x
datestring <- c("enero 10, 2012 10:40", "diciembre 9, 2011 9:10")
x <- strptime(datestring, "%m %d, %Y %H:%M")
x
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
## Operations
x <- as.Date("2012-01-01")
y <- strptime("9 Ene 2011 11:34:21", "%d %b %Y %H:%M:%S")
x-y
x <- as.POSIXlt(x)
x - y
x <- as.Date("2012-03-01"); y <- as.Date("2012-02-28")
x-y
x <- as.POSIXct("2012-10-25 01:00:00")
y <- as.POSIXct("2012-10-25 06:00:00", tz = "GMT")
y - x
savehistory("~/Documentos/r_programming_coursera/week_201_all_week2.Rhistory")
