getwd()
getwd()
getwd()
q()
getwd()
setwd("/home/cesar/Documentos/r_programming_coursera/")
ls()
dir()
cat("\014")
x <- 1
ls()
print(x)
x
msg <- "hello"
msg
print(msg)
x <-
1
cat("\014")
ls()
x <- 5 ## nothing printed
x      ## auto-printing occurs
print(x) ## explicit printing
msg
x
x <- 1:20
ls()
x
type(x)
y <- vector("numeric",5)
y
1 + 2
1L + 2L
1.5 + 2L
1/0
1/Inf
0/0
attributes(x) ## Show attributes for an object
attributes(y)
attributes("y")
attributes(msg)
print(attributes(x))
ls()
attributes(x) NULL
attributes(x)
x1 <- c(0.5,0.6) ## Creating vectors. numeric
x2 <- c(TRUE, FALSE) ## logical
x2 <- c(T, F) ## logical
x3 <- c("a","b","c") ## character
x4 <- 9:29 ## integer
x5 <- c(1+0i,2+4i) ## complex
x
y
y <- vector("numeric", length=10)
y
y <- vector("numeric", 10)
y
## In vector(), using length=0L or just 0L is the same
## Now we will be mixing objects and see coercion in action
y <- c(1.7, "a") ## character
y
y <- c(TRUE, 2) ## numeric
y
## By default TRUE goes to 1 and FALSE goes to zero
y <- c("a", TRUE) ## character
y
## Now, we will see explicit coercion
x <- 0:6
class(x) ## Check the class of x
as.numeric(x) ## x as a numeric vector
as.logical(x) ## x as a logical vector
as.character(x)
## Sometimes explicit coercion makes no sense. A warning message is printed and the vector is filled with NAs
x <- x3
as.numeric(x)
as.logical(x)
as.complex(x)
as.complex(x1)
## Lists is kind of a vector containing elements of different classes
x <- list(1, "a", TRUE, 1 + 4i)
x
## Elements of lists are list in double square brackets. For vectors, elements are list in single square brackets
## Matrices: vectors with a dimension attribute. Dimension attribute is a vector of length 2 (nrow, ncol)
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
## Matrices are filled column-wise from the left
m <- matrix(1:6, nrow = 2, ncol = 3)
m
## Matrices can also be created directly from vectors by adding a dimension attribute
m <- 1:10
m
## m is a vector right now
dim(m) <- c(2,5)
m
## Now m is a 2x5 matrix
## We can also bind columns and rows
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
rbind(y,x)
## NEW VIDEO
## Data Types - Factors
## Factors are used to represent data which is classified in categories
## In this objects, each element has a label
x <- factor(c("yes","yes","no","yes","no"))
x
table(x)
## table(obj) determines how many objects are from each category
unclass(x) ## Show the underlying form of the factor x
## This factor can be treated as a vector of yeses and nos
## The ordering of the levels into 1s and 2s is done in alphabetic order by default
## In order to impose our own leveling, we must explicitly give the 'levels' attribute
x <- factor(c("yes","yes","no","yes","no"), levels = c("yes","no"))
x
unclass(x)
## --------------------------------------------------------------------------------------------
## Missing Values
## Missing values are denoted by NA or NaN for undefined mathematical operations
## To check is objects are NA or NaN we can use is.na() or is.nan()
## NA values have class also. A NaN values is also NA but not conversely
is.na(0/0)
is.na(1/0)
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
x <- c(1, 2, NaN, NA, 4)
is.na(x)
is.nan(x)
## -----------------------------------------------------------------------------------------
## Data Frames
## Data frames are used to store tabular data. They are represented as a special type of list where every element of the list has to have the same length
## Each element of the list can be though as a column and the length of each element can be seen as the number of rows
## Data frames are usually created by calling read.table() or read.csv(). A data frame can be converted to a matrix by data.matrix()
## Example
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
nrow(x)
ncol(x)
## -----------------------------------------------------------------------------------------
## Data Types - Names Attribute
## R objects can also have names. Very useful when writing readable code and self-describing objects
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
## Lists can also have names
x <- list(a = 1, b = 2, c = 3)
x
names(x)
## Matrices can also have names
m <- matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a","b"),c("c","d"))
m
save.image("~/Documentos/r_programming_coursera/week_101_data_types.RData")
savehistory("~/Documentos/r_programming_coursera/week_101_data_types.Rhistory")
